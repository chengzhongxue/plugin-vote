/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.20.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { VoteData } from '../models';
// @ts-ignore
import type { VoteDetail } from '../models';
// @ts-ignore
import type { VoteUser } from '../models';
/**
 * ApiVoteKunkunyuComV1alpha1VoteApi - axios parameter creator
 * @export
 */
export const ApiVoteKunkunyuComV1alpha1VoteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 投票详情
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoteDetail: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getVoteDetail', 'name', name)
            const localVarPath = `/apis/api.vote.kunkunyu.com/v1alpha1/votes/{name}/detail`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 投票用户列表
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoteUserList: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getVoteUserList', 'name', name)
            const localVarPath = `/apis/api.vote.kunkunyu.com/v1alpha1/votes/{name}/user-list`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 用户提交投票
         * @param {string} name 
         * @param {VoteData} voteData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitVoteData: async (name: string, voteData: VoteData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('submitVoteData', 'name', name)
            // verify required parameter 'voteData' is not null or undefined
            assertParamExists('submitVoteData', 'voteData', voteData)
            const localVarPath = `/apis/api.vote.kunkunyu.com/v1alpha1/votes/{name}/submit`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(voteData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiVoteKunkunyuComV1alpha1VoteApi - functional programming interface
 * @export
 */
export const ApiVoteKunkunyuComV1alpha1VoteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiVoteKunkunyuComV1alpha1VoteApiAxiosParamCreator(configuration)
    return {
        /**
         * 投票详情
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVoteDetail(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVoteDetail(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiVoteKunkunyuComV1alpha1VoteApi.getVoteDetail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 投票用户列表
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVoteUserList(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VoteUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVoteUserList(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiVoteKunkunyuComV1alpha1VoteApi.getVoteUserList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 用户提交投票
         * @param {string} name 
         * @param {VoteData} voteData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitVoteData(name: string, voteData: VoteData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitVoteData(name, voteData, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiVoteKunkunyuComV1alpha1VoteApi.submitVoteData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApiVoteKunkunyuComV1alpha1VoteApi - factory interface
 * @export
 */
export const ApiVoteKunkunyuComV1alpha1VoteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiVoteKunkunyuComV1alpha1VoteApiFp(configuration)
    return {
        /**
         * 投票详情
         * @param {ApiVoteKunkunyuComV1alpha1VoteApiGetVoteDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoteDetail(requestParameters: ApiVoteKunkunyuComV1alpha1VoteApiGetVoteDetailRequest, options?: RawAxiosRequestConfig): AxiosPromise<VoteDetail> {
            return localVarFp.getVoteDetail(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * 投票用户列表
         * @param {ApiVoteKunkunyuComV1alpha1VoteApiGetVoteUserListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoteUserList(requestParameters: ApiVoteKunkunyuComV1alpha1VoteApiGetVoteUserListRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<VoteUser>> {
            return localVarFp.getVoteUserList(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * 用户提交投票
         * @param {ApiVoteKunkunyuComV1alpha1VoteApiSubmitVoteDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitVoteData(requestParameters: ApiVoteKunkunyuComV1alpha1VoteApiSubmitVoteDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<VoteData> {
            return localVarFp.submitVoteData(requestParameters.name, requestParameters.voteData, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getVoteDetail operation in ApiVoteKunkunyuComV1alpha1VoteApi.
 * @export
 * @interface ApiVoteKunkunyuComV1alpha1VoteApiGetVoteDetailRequest
 */
export interface ApiVoteKunkunyuComV1alpha1VoteApiGetVoteDetailRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiVoteKunkunyuComV1alpha1VoteApiGetVoteDetail
     */
    readonly name: string
}

/**
 * Request parameters for getVoteUserList operation in ApiVoteKunkunyuComV1alpha1VoteApi.
 * @export
 * @interface ApiVoteKunkunyuComV1alpha1VoteApiGetVoteUserListRequest
 */
export interface ApiVoteKunkunyuComV1alpha1VoteApiGetVoteUserListRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiVoteKunkunyuComV1alpha1VoteApiGetVoteUserList
     */
    readonly name: string
}

/**
 * Request parameters for submitVoteData operation in ApiVoteKunkunyuComV1alpha1VoteApi.
 * @export
 * @interface ApiVoteKunkunyuComV1alpha1VoteApiSubmitVoteDataRequest
 */
export interface ApiVoteKunkunyuComV1alpha1VoteApiSubmitVoteDataRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiVoteKunkunyuComV1alpha1VoteApiSubmitVoteData
     */
    readonly name: string

    /**
     * 
     * @type {VoteData}
     * @memberof ApiVoteKunkunyuComV1alpha1VoteApiSubmitVoteData
     */
    readonly voteData: VoteData
}

/**
 * ApiVoteKunkunyuComV1alpha1VoteApi - object-oriented interface
 * @export
 * @class ApiVoteKunkunyuComV1alpha1VoteApi
 * @extends {BaseAPI}
 */
export class ApiVoteKunkunyuComV1alpha1VoteApi extends BaseAPI {
    /**
     * 投票详情
     * @param {ApiVoteKunkunyuComV1alpha1VoteApiGetVoteDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiVoteKunkunyuComV1alpha1VoteApi
     */
    public getVoteDetail(requestParameters: ApiVoteKunkunyuComV1alpha1VoteApiGetVoteDetailRequest, options?: RawAxiosRequestConfig) {
        return ApiVoteKunkunyuComV1alpha1VoteApiFp(this.configuration).getVoteDetail(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 投票用户列表
     * @param {ApiVoteKunkunyuComV1alpha1VoteApiGetVoteUserListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiVoteKunkunyuComV1alpha1VoteApi
     */
    public getVoteUserList(requestParameters: ApiVoteKunkunyuComV1alpha1VoteApiGetVoteUserListRequest, options?: RawAxiosRequestConfig) {
        return ApiVoteKunkunyuComV1alpha1VoteApiFp(this.configuration).getVoteUserList(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 用户提交投票
     * @param {ApiVoteKunkunyuComV1alpha1VoteApiSubmitVoteDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiVoteKunkunyuComV1alpha1VoteApi
     */
    public submitVoteData(requestParameters: ApiVoteKunkunyuComV1alpha1VoteApiSubmitVoteDataRequest, options?: RawAxiosRequestConfig) {
        return ApiVoteKunkunyuComV1alpha1VoteApiFp(this.configuration).submitVoteData(requestParameters.name, requestParameters.voteData, options).then((request) => request(this.axios, this.basePath));
    }
}

