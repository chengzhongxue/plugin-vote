/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.20.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { JsonPatchInner } from '../models';
// @ts-ignore
import type { VoteData } from '../models';
// @ts-ignore
import type { VoteDataList } from '../models';
/**
 * VoteDataV1alpha1Api - axios parameter creator
 * @export
 */
export const VoteDataV1alpha1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create VoteData
         * @param {VoteData} [voteData] Fresh votedata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVoteData: async (voteData?: VoteData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/vote.kunkunyu.com/v1alpha1/votedatas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(voteData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete VoteData
         * @param {string} name Name of votedata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVoteData: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteVoteData', 'name', name)
            const localVarPath = `/apis/vote.kunkunyu.com/v1alpha1/votedatas/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get VoteData
         * @param {string} name Name of votedata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoteData: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getVoteData', 'name', name)
            const localVarPath = `/apis/vote.kunkunyu.com/v1alpha1/votedatas/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List VoteData
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVoteData: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/vote.kunkunyu.com/v1alpha1/votedatas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch VoteData
         * @param {string} name Name of votedata
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVoteData: async (name: string, jsonPatchInner?: Array<JsonPatchInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchVoteData', 'name', name)
            const localVarPath = `/apis/vote.kunkunyu.com/v1alpha1/votedatas/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatchInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update VoteData
         * @param {string} name Name of votedata
         * @param {VoteData} [voteData] Updated votedata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVoteData: async (name: string, voteData?: VoteData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateVoteData', 'name', name)
            const localVarPath = `/apis/vote.kunkunyu.com/v1alpha1/votedatas/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(voteData, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VoteDataV1alpha1Api - functional programming interface
 * @export
 */
export const VoteDataV1alpha1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VoteDataV1alpha1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Create VoteData
         * @param {VoteData} [voteData] Fresh votedata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVoteData(voteData?: VoteData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVoteData(voteData, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoteDataV1alpha1Api.createVoteData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete VoteData
         * @param {string} name Name of votedata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVoteData(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVoteData(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoteDataV1alpha1Api.deleteVoteData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get VoteData
         * @param {string} name Name of votedata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVoteData(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVoteData(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoteDataV1alpha1Api.getVoteData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List VoteData
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVoteData(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteDataList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVoteData(page, size, labelSelector, fieldSelector, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoteDataV1alpha1Api.listVoteData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Patch VoteData
         * @param {string} name Name of votedata
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchVoteData(name: string, jsonPatchInner?: Array<JsonPatchInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchVoteData(name, jsonPatchInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoteDataV1alpha1Api.patchVoteData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update VoteData
         * @param {string} name Name of votedata
         * @param {VoteData} [voteData] Updated votedata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVoteData(name: string, voteData?: VoteData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVoteData(name, voteData, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoteDataV1alpha1Api.updateVoteData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VoteDataV1alpha1Api - factory interface
 * @export
 */
export const VoteDataV1alpha1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VoteDataV1alpha1ApiFp(configuration)
    return {
        /**
         * Create VoteData
         * @param {VoteDataV1alpha1ApiCreateVoteDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVoteData(requestParameters: VoteDataV1alpha1ApiCreateVoteDataRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<VoteData> {
            return localVarFp.createVoteData(requestParameters.voteData, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete VoteData
         * @param {VoteDataV1alpha1ApiDeleteVoteDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVoteData(requestParameters: VoteDataV1alpha1ApiDeleteVoteDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteVoteData(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get VoteData
         * @param {VoteDataV1alpha1ApiGetVoteDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVoteData(requestParameters: VoteDataV1alpha1ApiGetVoteDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<VoteData> {
            return localVarFp.getVoteData(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * List VoteData
         * @param {VoteDataV1alpha1ApiListVoteDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVoteData(requestParameters: VoteDataV1alpha1ApiListVoteDataRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<VoteDataList> {
            return localVarFp.listVoteData(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch VoteData
         * @param {VoteDataV1alpha1ApiPatchVoteDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVoteData(requestParameters: VoteDataV1alpha1ApiPatchVoteDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<VoteData> {
            return localVarFp.patchVoteData(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Update VoteData
         * @param {VoteDataV1alpha1ApiUpdateVoteDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVoteData(requestParameters: VoteDataV1alpha1ApiUpdateVoteDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<VoteData> {
            return localVarFp.updateVoteData(requestParameters.name, requestParameters.voteData, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createVoteData operation in VoteDataV1alpha1Api.
 * @export
 * @interface VoteDataV1alpha1ApiCreateVoteDataRequest
 */
export interface VoteDataV1alpha1ApiCreateVoteDataRequest {
    /**
     * Fresh votedata
     * @type {VoteData}
     * @memberof VoteDataV1alpha1ApiCreateVoteData
     */
    readonly voteData?: VoteData
}

/**
 * Request parameters for deleteVoteData operation in VoteDataV1alpha1Api.
 * @export
 * @interface VoteDataV1alpha1ApiDeleteVoteDataRequest
 */
export interface VoteDataV1alpha1ApiDeleteVoteDataRequest {
    /**
     * Name of votedata
     * @type {string}
     * @memberof VoteDataV1alpha1ApiDeleteVoteData
     */
    readonly name: string
}

/**
 * Request parameters for getVoteData operation in VoteDataV1alpha1Api.
 * @export
 * @interface VoteDataV1alpha1ApiGetVoteDataRequest
 */
export interface VoteDataV1alpha1ApiGetVoteDataRequest {
    /**
     * Name of votedata
     * @type {string}
     * @memberof VoteDataV1alpha1ApiGetVoteData
     */
    readonly name: string
}

/**
 * Request parameters for listVoteData operation in VoteDataV1alpha1Api.
 * @export
 * @interface VoteDataV1alpha1ApiListVoteDataRequest
 */
export interface VoteDataV1alpha1ApiListVoteDataRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof VoteDataV1alpha1ApiListVoteData
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof VoteDataV1alpha1ApiListVoteData
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof VoteDataV1alpha1ApiListVoteData
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof VoteDataV1alpha1ApiListVoteData
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof VoteDataV1alpha1ApiListVoteData
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for patchVoteData operation in VoteDataV1alpha1Api.
 * @export
 * @interface VoteDataV1alpha1ApiPatchVoteDataRequest
 */
export interface VoteDataV1alpha1ApiPatchVoteDataRequest {
    /**
     * Name of votedata
     * @type {string}
     * @memberof VoteDataV1alpha1ApiPatchVoteData
     */
    readonly name: string

    /**
     * 
     * @type {Array<JsonPatchInner>}
     * @memberof VoteDataV1alpha1ApiPatchVoteData
     */
    readonly jsonPatchInner?: Array<JsonPatchInner>
}

/**
 * Request parameters for updateVoteData operation in VoteDataV1alpha1Api.
 * @export
 * @interface VoteDataV1alpha1ApiUpdateVoteDataRequest
 */
export interface VoteDataV1alpha1ApiUpdateVoteDataRequest {
    /**
     * Name of votedata
     * @type {string}
     * @memberof VoteDataV1alpha1ApiUpdateVoteData
     */
    readonly name: string

    /**
     * Updated votedata
     * @type {VoteData}
     * @memberof VoteDataV1alpha1ApiUpdateVoteData
     */
    readonly voteData?: VoteData
}

/**
 * VoteDataV1alpha1Api - object-oriented interface
 * @export
 * @class VoteDataV1alpha1Api
 * @extends {BaseAPI}
 */
export class VoteDataV1alpha1Api extends BaseAPI {
    /**
     * Create VoteData
     * @param {VoteDataV1alpha1ApiCreateVoteDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteDataV1alpha1Api
     */
    public createVoteData(requestParameters: VoteDataV1alpha1ApiCreateVoteDataRequest = {}, options?: RawAxiosRequestConfig) {
        return VoteDataV1alpha1ApiFp(this.configuration).createVoteData(requestParameters.voteData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete VoteData
     * @param {VoteDataV1alpha1ApiDeleteVoteDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteDataV1alpha1Api
     */
    public deleteVoteData(requestParameters: VoteDataV1alpha1ApiDeleteVoteDataRequest, options?: RawAxiosRequestConfig) {
        return VoteDataV1alpha1ApiFp(this.configuration).deleteVoteData(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get VoteData
     * @param {VoteDataV1alpha1ApiGetVoteDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteDataV1alpha1Api
     */
    public getVoteData(requestParameters: VoteDataV1alpha1ApiGetVoteDataRequest, options?: RawAxiosRequestConfig) {
        return VoteDataV1alpha1ApiFp(this.configuration).getVoteData(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List VoteData
     * @param {VoteDataV1alpha1ApiListVoteDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteDataV1alpha1Api
     */
    public listVoteData(requestParameters: VoteDataV1alpha1ApiListVoteDataRequest = {}, options?: RawAxiosRequestConfig) {
        return VoteDataV1alpha1ApiFp(this.configuration).listVoteData(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patch VoteData
     * @param {VoteDataV1alpha1ApiPatchVoteDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteDataV1alpha1Api
     */
    public patchVoteData(requestParameters: VoteDataV1alpha1ApiPatchVoteDataRequest, options?: RawAxiosRequestConfig) {
        return VoteDataV1alpha1ApiFp(this.configuration).patchVoteData(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update VoteData
     * @param {VoteDataV1alpha1ApiUpdateVoteDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteDataV1alpha1Api
     */
    public updateVoteData(requestParameters: VoteDataV1alpha1ApiUpdateVoteDataRequest, options?: RawAxiosRequestConfig) {
        return VoteDataV1alpha1ApiFp(this.configuration).updateVoteData(requestParameters.name, requestParameters.voteData, options).then((request) => request(this.axios, this.basePath));
    }
}

