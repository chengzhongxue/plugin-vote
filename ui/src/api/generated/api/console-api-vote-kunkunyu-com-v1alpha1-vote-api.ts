/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.20.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Vote } from '../models';
// @ts-ignore
import type { VoteList } from '../models';
// @ts-ignore
import type { VoteUser } from '../models';
/**
 * ConsoleApiVoteKunkunyuComV1alpha1VoteApi - axios parameter creator
 * @export
 */
export const ConsoleApiVoteKunkunyuComV1alpha1VoteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 添加投票
         * @param {Vote} vote 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVote: async (vote: Vote, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vote' is not null or undefined
            assertParamExists('createVote', 'vote', vote)
            const localVarPath = `/apis/console.api.vote.kunkunyu.com/v1alpha1/votes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vote, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 分页查询投票列表
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [keyword] Vote filtered by keyword.
         * @param {string} [type] Vote type.
         * @param {string} [hasEnded] Vote hasEnded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVotes: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, keyword?: string, type?: string, hasEnded?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/console.api.vote.kunkunyu.com/v1alpha1/votes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (hasEnded !== undefined) {
                localVarQueryParameter['hasEnded'] = hasEnded;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 编辑投票
         * @param {string} name 
         * @param {Vote} vote 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVote: async (name: string, vote: Vote, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateVote', 'name', name)
            // verify required parameter 'vote' is not null or undefined
            assertParamExists('updateVote', 'vote', vote)
            const localVarPath = `/apis/console.api.vote.kunkunyu.com/v1alpha1/votes/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vote, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 投票用户列表
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteUserList: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('voteUserList', 'name', name)
            const localVarPath = `/apis/console.api.vote.kunkunyu.com/v1alpha1/votes/{name}/user-list`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsoleApiVoteKunkunyuComV1alpha1VoteApi - functional programming interface
 * @export
 */
export const ConsoleApiVoteKunkunyuComV1alpha1VoteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConsoleApiVoteKunkunyuComV1alpha1VoteApiAxiosParamCreator(configuration)
    return {
        /**
         * 添加投票
         * @param {Vote} vote 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVote(vote: Vote, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vote>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVote(vote, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsoleApiVoteKunkunyuComV1alpha1VoteApi.createVote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 分页查询投票列表
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [keyword] Vote filtered by keyword.
         * @param {string} [type] Vote type.
         * @param {string} [hasEnded] Vote hasEnded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVotes(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, keyword?: string, type?: string, hasEnded?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVotes(page, size, labelSelector, fieldSelector, sort, keyword, type, hasEnded, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsoleApiVoteKunkunyuComV1alpha1VoteApi.listVotes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 编辑投票
         * @param {string} name 
         * @param {Vote} vote 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVote(name: string, vote: Vote, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vote>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVote(name, vote, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsoleApiVoteKunkunyuComV1alpha1VoteApi.updateVote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 投票用户列表
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voteUserList(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VoteUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voteUserList(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsoleApiVoteKunkunyuComV1alpha1VoteApi.voteUserList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConsoleApiVoteKunkunyuComV1alpha1VoteApi - factory interface
 * @export
 */
export const ConsoleApiVoteKunkunyuComV1alpha1VoteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConsoleApiVoteKunkunyuComV1alpha1VoteApiFp(configuration)
    return {
        /**
         * 添加投票
         * @param {ConsoleApiVoteKunkunyuComV1alpha1VoteApiCreateVoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVote(requestParameters: ConsoleApiVoteKunkunyuComV1alpha1VoteApiCreateVoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vote> {
            return localVarFp.createVote(requestParameters.vote, options).then((request) => request(axios, basePath));
        },
        /**
         * 分页查询投票列表
         * @param {ConsoleApiVoteKunkunyuComV1alpha1VoteApiListVotesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVotes(requestParameters: ConsoleApiVoteKunkunyuComV1alpha1VoteApiListVotesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<VoteList> {
            return localVarFp.listVotes(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, requestParameters.keyword, requestParameters.type, requestParameters.hasEnded, options).then((request) => request(axios, basePath));
        },
        /**
         * 编辑投票
         * @param {ConsoleApiVoteKunkunyuComV1alpha1VoteApiUpdateVoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVote(requestParameters: ConsoleApiVoteKunkunyuComV1alpha1VoteApiUpdateVoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vote> {
            return localVarFp.updateVote(requestParameters.name, requestParameters.vote, options).then((request) => request(axios, basePath));
        },
        /**
         * 投票用户列表
         * @param {ConsoleApiVoteKunkunyuComV1alpha1VoteApiVoteUserListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voteUserList(requestParameters: ConsoleApiVoteKunkunyuComV1alpha1VoteApiVoteUserListRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<VoteUser>> {
            return localVarFp.voteUserList(requestParameters.name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createVote operation in ConsoleApiVoteKunkunyuComV1alpha1VoteApi.
 * @export
 * @interface ConsoleApiVoteKunkunyuComV1alpha1VoteApiCreateVoteRequest
 */
export interface ConsoleApiVoteKunkunyuComV1alpha1VoteApiCreateVoteRequest {
    /**
     * 
     * @type {Vote}
     * @memberof ConsoleApiVoteKunkunyuComV1alpha1VoteApiCreateVote
     */
    readonly vote: Vote
}

/**
 * Request parameters for listVotes operation in ConsoleApiVoteKunkunyuComV1alpha1VoteApi.
 * @export
 * @interface ConsoleApiVoteKunkunyuComV1alpha1VoteApiListVotesRequest
 */
export interface ConsoleApiVoteKunkunyuComV1alpha1VoteApiListVotesRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof ConsoleApiVoteKunkunyuComV1alpha1VoteApiListVotes
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof ConsoleApiVoteKunkunyuComV1alpha1VoteApiListVotes
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof ConsoleApiVoteKunkunyuComV1alpha1VoteApiListVotes
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof ConsoleApiVoteKunkunyuComV1alpha1VoteApiListVotes
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof ConsoleApiVoteKunkunyuComV1alpha1VoteApiListVotes
     */
    readonly sort?: Array<string>

    /**
     * Vote filtered by keyword.
     * @type {string}
     * @memberof ConsoleApiVoteKunkunyuComV1alpha1VoteApiListVotes
     */
    readonly keyword?: string

    /**
     * Vote type.
     * @type {string}
     * @memberof ConsoleApiVoteKunkunyuComV1alpha1VoteApiListVotes
     */
    readonly type?: string

    /**
     * Vote hasEnded.
     * @type {string}
     * @memberof ConsoleApiVoteKunkunyuComV1alpha1VoteApiListVotes
     */
    readonly hasEnded?: string
}

/**
 * Request parameters for updateVote operation in ConsoleApiVoteKunkunyuComV1alpha1VoteApi.
 * @export
 * @interface ConsoleApiVoteKunkunyuComV1alpha1VoteApiUpdateVoteRequest
 */
export interface ConsoleApiVoteKunkunyuComV1alpha1VoteApiUpdateVoteRequest {
    /**
     * 
     * @type {string}
     * @memberof ConsoleApiVoteKunkunyuComV1alpha1VoteApiUpdateVote
     */
    readonly name: string

    /**
     * 
     * @type {Vote}
     * @memberof ConsoleApiVoteKunkunyuComV1alpha1VoteApiUpdateVote
     */
    readonly vote: Vote
}

/**
 * Request parameters for voteUserList operation in ConsoleApiVoteKunkunyuComV1alpha1VoteApi.
 * @export
 * @interface ConsoleApiVoteKunkunyuComV1alpha1VoteApiVoteUserListRequest
 */
export interface ConsoleApiVoteKunkunyuComV1alpha1VoteApiVoteUserListRequest {
    /**
     * 
     * @type {string}
     * @memberof ConsoleApiVoteKunkunyuComV1alpha1VoteApiVoteUserList
     */
    readonly name: string
}

/**
 * ConsoleApiVoteKunkunyuComV1alpha1VoteApi - object-oriented interface
 * @export
 * @class ConsoleApiVoteKunkunyuComV1alpha1VoteApi
 * @extends {BaseAPI}
 */
export class ConsoleApiVoteKunkunyuComV1alpha1VoteApi extends BaseAPI {
    /**
     * 添加投票
     * @param {ConsoleApiVoteKunkunyuComV1alpha1VoteApiCreateVoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApiVoteKunkunyuComV1alpha1VoteApi
     */
    public createVote(requestParameters: ConsoleApiVoteKunkunyuComV1alpha1VoteApiCreateVoteRequest, options?: RawAxiosRequestConfig) {
        return ConsoleApiVoteKunkunyuComV1alpha1VoteApiFp(this.configuration).createVote(requestParameters.vote, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 分页查询投票列表
     * @param {ConsoleApiVoteKunkunyuComV1alpha1VoteApiListVotesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApiVoteKunkunyuComV1alpha1VoteApi
     */
    public listVotes(requestParameters: ConsoleApiVoteKunkunyuComV1alpha1VoteApiListVotesRequest = {}, options?: RawAxiosRequestConfig) {
        return ConsoleApiVoteKunkunyuComV1alpha1VoteApiFp(this.configuration).listVotes(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, requestParameters.keyword, requestParameters.type, requestParameters.hasEnded, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 编辑投票
     * @param {ConsoleApiVoteKunkunyuComV1alpha1VoteApiUpdateVoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApiVoteKunkunyuComV1alpha1VoteApi
     */
    public updateVote(requestParameters: ConsoleApiVoteKunkunyuComV1alpha1VoteApiUpdateVoteRequest, options?: RawAxiosRequestConfig) {
        return ConsoleApiVoteKunkunyuComV1alpha1VoteApiFp(this.configuration).updateVote(requestParameters.name, requestParameters.vote, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 投票用户列表
     * @param {ConsoleApiVoteKunkunyuComV1alpha1VoteApiVoteUserListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApiVoteKunkunyuComV1alpha1VoteApi
     */
    public voteUserList(requestParameters: ConsoleApiVoteKunkunyuComV1alpha1VoteApiVoteUserListRequest, options?: RawAxiosRequestConfig) {
        return ConsoleApiVoteKunkunyuComV1alpha1VoteApiFp(this.configuration).voteUserList(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }
}

