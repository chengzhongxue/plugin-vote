/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.20.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { JsonPatchInner } from '../models';
// @ts-ignore
import type { Vote } from '../models';
// @ts-ignore
import type { VoteList } from '../models';
/**
 * VoteV1alpha1Api - axios parameter creator
 * @export
 */
export const VoteV1alpha1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create Vote
         * @param {Vote} [vote] Fresh vote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVote: async (vote?: Vote, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/vote.kunkunyu.com/v1alpha1/votes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vote, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Vote
         * @param {string} name Name of vote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVote: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteVote', 'name', name)
            const localVarPath = `/apis/vote.kunkunyu.com/v1alpha1/votes/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Vote
         * @param {string} name Name of vote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVote: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getVote', 'name', name)
            const localVarPath = `/apis/vote.kunkunyu.com/v1alpha1/votes/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Vote
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVote: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/vote.kunkunyu.com/v1alpha1/votes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch Vote
         * @param {string} name Name of vote
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVote: async (name: string, jsonPatchInner?: Array<JsonPatchInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchVote', 'name', name)
            const localVarPath = `/apis/vote.kunkunyu.com/v1alpha1/votes/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatchInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Vote
         * @param {string} name Name of vote
         * @param {Vote} [vote] Updated vote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVote: async (name: string, vote?: Vote, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateVote', 'name', name)
            const localVarPath = `/apis/vote.kunkunyu.com/v1alpha1/votes/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vote, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VoteV1alpha1Api - functional programming interface
 * @export
 */
export const VoteV1alpha1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VoteV1alpha1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Create Vote
         * @param {Vote} [vote] Fresh vote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVote(vote?: Vote, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vote>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVote(vote, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoteV1alpha1Api.createVote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete Vote
         * @param {string} name Name of vote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVote(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVote(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoteV1alpha1Api.deleteVote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Vote
         * @param {string} name Name of vote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVote(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vote>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVote(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoteV1alpha1Api.getVote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List Vote
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVote(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoteList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVote(page, size, labelSelector, fieldSelector, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoteV1alpha1Api.listVote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Patch Vote
         * @param {string} name Name of vote
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchVote(name: string, jsonPatchInner?: Array<JsonPatchInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vote>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchVote(name, jsonPatchInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoteV1alpha1Api.patchVote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Vote
         * @param {string} name Name of vote
         * @param {Vote} [vote] Updated vote
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVote(name: string, vote?: Vote, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vote>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVote(name, vote, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VoteV1alpha1Api.updateVote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VoteV1alpha1Api - factory interface
 * @export
 */
export const VoteV1alpha1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VoteV1alpha1ApiFp(configuration)
    return {
        /**
         * Create Vote
         * @param {VoteV1alpha1ApiCreateVoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVote(requestParameters: VoteV1alpha1ApiCreateVoteRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Vote> {
            return localVarFp.createVote(requestParameters.vote, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Vote
         * @param {VoteV1alpha1ApiDeleteVoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVote(requestParameters: VoteV1alpha1ApiDeleteVoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteVote(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Vote
         * @param {VoteV1alpha1ApiGetVoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVote(requestParameters: VoteV1alpha1ApiGetVoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vote> {
            return localVarFp.getVote(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * List Vote
         * @param {VoteV1alpha1ApiListVoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVote(requestParameters: VoteV1alpha1ApiListVoteRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<VoteList> {
            return localVarFp.listVote(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch Vote
         * @param {VoteV1alpha1ApiPatchVoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchVote(requestParameters: VoteV1alpha1ApiPatchVoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vote> {
            return localVarFp.patchVote(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Vote
         * @param {VoteV1alpha1ApiUpdateVoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVote(requestParameters: VoteV1alpha1ApiUpdateVoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vote> {
            return localVarFp.updateVote(requestParameters.name, requestParameters.vote, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createVote operation in VoteV1alpha1Api.
 * @export
 * @interface VoteV1alpha1ApiCreateVoteRequest
 */
export interface VoteV1alpha1ApiCreateVoteRequest {
    /**
     * Fresh vote
     * @type {Vote}
     * @memberof VoteV1alpha1ApiCreateVote
     */
    readonly vote?: Vote
}

/**
 * Request parameters for deleteVote operation in VoteV1alpha1Api.
 * @export
 * @interface VoteV1alpha1ApiDeleteVoteRequest
 */
export interface VoteV1alpha1ApiDeleteVoteRequest {
    /**
     * Name of vote
     * @type {string}
     * @memberof VoteV1alpha1ApiDeleteVote
     */
    readonly name: string
}

/**
 * Request parameters for getVote operation in VoteV1alpha1Api.
 * @export
 * @interface VoteV1alpha1ApiGetVoteRequest
 */
export interface VoteV1alpha1ApiGetVoteRequest {
    /**
     * Name of vote
     * @type {string}
     * @memberof VoteV1alpha1ApiGetVote
     */
    readonly name: string
}

/**
 * Request parameters for listVote operation in VoteV1alpha1Api.
 * @export
 * @interface VoteV1alpha1ApiListVoteRequest
 */
export interface VoteV1alpha1ApiListVoteRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof VoteV1alpha1ApiListVote
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof VoteV1alpha1ApiListVote
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof VoteV1alpha1ApiListVote
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof VoteV1alpha1ApiListVote
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof VoteV1alpha1ApiListVote
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for patchVote operation in VoteV1alpha1Api.
 * @export
 * @interface VoteV1alpha1ApiPatchVoteRequest
 */
export interface VoteV1alpha1ApiPatchVoteRequest {
    /**
     * Name of vote
     * @type {string}
     * @memberof VoteV1alpha1ApiPatchVote
     */
    readonly name: string

    /**
     * 
     * @type {Array<JsonPatchInner>}
     * @memberof VoteV1alpha1ApiPatchVote
     */
    readonly jsonPatchInner?: Array<JsonPatchInner>
}

/**
 * Request parameters for updateVote operation in VoteV1alpha1Api.
 * @export
 * @interface VoteV1alpha1ApiUpdateVoteRequest
 */
export interface VoteV1alpha1ApiUpdateVoteRequest {
    /**
     * Name of vote
     * @type {string}
     * @memberof VoteV1alpha1ApiUpdateVote
     */
    readonly name: string

    /**
     * Updated vote
     * @type {Vote}
     * @memberof VoteV1alpha1ApiUpdateVote
     */
    readonly vote?: Vote
}

/**
 * VoteV1alpha1Api - object-oriented interface
 * @export
 * @class VoteV1alpha1Api
 * @extends {BaseAPI}
 */
export class VoteV1alpha1Api extends BaseAPI {
    /**
     * Create Vote
     * @param {VoteV1alpha1ApiCreateVoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteV1alpha1Api
     */
    public createVote(requestParameters: VoteV1alpha1ApiCreateVoteRequest = {}, options?: RawAxiosRequestConfig) {
        return VoteV1alpha1ApiFp(this.configuration).createVote(requestParameters.vote, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Vote
     * @param {VoteV1alpha1ApiDeleteVoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteV1alpha1Api
     */
    public deleteVote(requestParameters: VoteV1alpha1ApiDeleteVoteRequest, options?: RawAxiosRequestConfig) {
        return VoteV1alpha1ApiFp(this.configuration).deleteVote(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Vote
     * @param {VoteV1alpha1ApiGetVoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteV1alpha1Api
     */
    public getVote(requestParameters: VoteV1alpha1ApiGetVoteRequest, options?: RawAxiosRequestConfig) {
        return VoteV1alpha1ApiFp(this.configuration).getVote(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Vote
     * @param {VoteV1alpha1ApiListVoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteV1alpha1Api
     */
    public listVote(requestParameters: VoteV1alpha1ApiListVoteRequest = {}, options?: RawAxiosRequestConfig) {
        return VoteV1alpha1ApiFp(this.configuration).listVote(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patch Vote
     * @param {VoteV1alpha1ApiPatchVoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteV1alpha1Api
     */
    public patchVote(requestParameters: VoteV1alpha1ApiPatchVoteRequest, options?: RawAxiosRequestConfig) {
        return VoteV1alpha1ApiFp(this.configuration).patchVote(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Vote
     * @param {VoteV1alpha1ApiUpdateVoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoteV1alpha1Api
     */
    public updateVote(requestParameters: VoteV1alpha1ApiUpdateVoteRequest, options?: RawAxiosRequestConfig) {
        return VoteV1alpha1ApiFp(this.configuration).updateVote(requestParameters.name, requestParameters.vote, options).then((request) => request(this.axios, this.basePath));
    }
}

